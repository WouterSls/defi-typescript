openapi: 3.1.0
info:
  title: DeFi Typescript API
  version: 1.0.0
  description: Stateless API for interacting with common defi protocols using typescript abstractions

servers:
  - url: /api/v1
    description: API v1

tags:
  - name: System
    description: System operations
  - name: Data
    description: Data operations
  - name: Trades
    description: Trades operations
  - name: Wallet
    description: Wallet operations

paths:
  # System
  /system/health:
    get:
      summary: Get system health
      description: Returns the current system health
      tags:
        - System
      responses:
        "200":
          description: System health
          content:
            application/json:
              schema:
                type: string
                example: "OK"

  # Trades
  /trades:
    get:
      summary: Get all trades
      description: Returns all trades
      tags:
        - Trades
      responses:
        "200":
          description: Trade info
          content:
            application/json:
              schema:
                type: object
                properties:
                  trades:
                    type: array
                    items:
                      $ref: "#/components/schemas/TradeDto"
    post:
      summary: Create a new trade
      description: Creates a new trade
      tags:
        - Trades
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/BuyTradeCreationDto"
                - $ref: "#/components/schemas/SellTradeCreationDto"
              discriminator:
                propertyName: tradeType
                mapping:
                  BUY: "#/components/schemas/BuyTradeCreationDto"
                  SELL: "#/components/schemas/SellTradeCreationDto"
      responses:
        "200":
          description: Trade created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  tradeDto:
                    $ref: "#/components/schemas/TradeDto"
  /trades/uniV2:
    post:
      summary: Create a new trade using uniswap v2
      description: Creates a new trade
      tags:
        - Trades
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/BuyTradeCreationDto"
                - $ref: "#/components/schemas/SellTradeCreationDto"
              discriminator:
                propertyName: tradeType
                mapping:
                  BUY: "#/components/schemas/BuyTradeCreationDto"
                  SELL: "#/components/schemas/SellTradeCreationDto"
      responses:
        "200":
          description: Trade created successfully
          content:
            application/json:
              schema:
                type: object
  /trades/uniV3:
    post:
      summary: Create a new trade using uniswap v3
      description: Creates a new trade
      tags:
        - Trades
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/BuyTradeCreationDto"
                - $ref: "#/components/schemas/SellTradeCreationDto"
              discriminator:
                propertyName: tradeType
                mapping:
                  BUY: "#/components/schemas/BuyTradeCreationDto"
                  SELL: "#/components/schemas/SellTradeCreationDto"
      responses:
        "200":
          description: Trade created successfully
          content:
            application/json:
              schema:
                type: object
  /trades/uniV4:
    post:
      summary: Create a new trade using uniswap v4
      description: Creates a new trade
      tags:
        - Trades
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: "#/components/schemas/BuyTradeCreationDto"
                - $ref: "#/components/schemas/SellTradeCreationDto"
              discriminator:
                propertyName: tradeType
                mapping:
                  BUY: "#/components/schemas/BuyTradeCreationDto"
                  SELL: "#/components/schemas/SellTradeCreationDto"
      responses:
        "200":
          description: Trade created successfully
          content:
            application/json:
              schema:
                type: object

  # Wallet
  /wallets:
    get:
      summary: Get wallet info
      description: Returns wallet info of all wallets
      tags:
        - Wallet
      responses:
        "200":
          description: Wallet info
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  wallets:
                    type: array
                    items:
                      $ref: "#/components/schemas/WalletDto"
    post:
      summary: Create wallet
      description: Creates a new wallet
      tags:
        - Wallet
      responses:
        "200":
          description: Wallet created
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  wallet:
                    $ref: "#/components/schemas/WalletDto"

  /wallets/{id}:
    get:
      summary: Get wallet info
      description: Returns wallet info of a specific wallet
      tags:
        - Wallet
      responses:
        "200":
          description: Wallet info
          content:
            application/json:
              schema:
                type: object
    put:
      summary: Update wallet
      description: Updates a wallet
      tags:
        - Wallet
      responses:
        "201":
          description: Wallet updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
components:
  schemas:
    # Trader
    TradeDto:
      type: object
      properties:
        walletAddress:
          type: string
        tradeType:
          type: string

    # Wallet
    WalletCreationDto:
      type: object
      properties:
        rpcUrl:
          type: string
        privateKey:
          type: string

    WalletDto:
      type: object
      properties:
        address:
          type: string
        chains:
          type: array
          items:
            type: string

    BuyTradeCreationDto:
      type: object
      properties:
        tradeType:
          type: string
          enum: [BUY]
          description: Type of trade
        wallet:
          type: object
          $ref: "#/components/schemas/WalletCreationDto"
        chain:
          type: string
          enum: [ETH, ARB, BASE]
          description: Blockchain network
        inputToken:
          type: string
          enum: [USDC, WETH, ETH]
          description: Address of the token you're paying with
        inputAmount:
          type: string
          description: Amount of input tokens to be traded
        outputToken:
          type: string
          description: Token you want to buy
      required:
        - wallet
        - chain
        - inputToken
        - inputAmount
        - outputToken
        - tradeType

    SellTradeCreationDto:
      type: object
      properties:
        tradeType:
          type: string
          enum: [SELL]
          description: Type of trade
        wallet:
          type: object
          $ref: "#/components/schemas/WalletCreationDto"
        chain:
          type: string
          enum: [ETH, ARB, BASE]
          description: Blockchain network
        inputToken:
          type: string
          description: Address of the token you're selling
        inputAmount:
          type: string
          description: Amount of input tokens to be traded
        outputToken:
          type: string
          enum: [USDC, WETH, ETH]
          description: Token you want to receive
        tradingPointPrice:
          type: string
          description: The USD trading point price at which to sell
      required:
        - wallet
        - chain
        - inputToken
        - inputAmount
        - outputToken
        - tradingPointPrice
        - tradeType
